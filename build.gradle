plugins {
    id 'org.hidetake.ssh' version '2.7.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

repositories {
    maven {
        url "https://maven.csse.rose-hulman.edu/artifactory/libs-release"
    }
}
dependencies {
    compile(group: 'edu.rosehulman.csse477.ctrl_alt_f4_delete.sws', name: 'WebServer', version: '1.0.5')
    testCompile 'junit:junit:4.+'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

group 'edu.rosehulman.csse477.ctrl_alt_f4_delete'
version '1.0-SNAPSHOT'

if (System.getenv("CI_BUILD_TAG") != null) {
    version = "${System.getenv("CI_BUILD_TAG")}"
} else {
    version = '1.0.1-SNAPSHOT'
}
jar {
    manifest {
        attributes "Implementation-Title": "UserServletImpl",
                "Implementation-Version": "${version}",
                "pluginId": "users"
    }
}
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://${buildDir}/repo")
        }
    }
}
task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact packageSources
        }
    }
}
publishing {
    repositories {
        maven {
            credentials {
                username System.getenv('MAVEN_USER')
                password System.getenv('MAVEN_PASSWORD')
            }
            url "https://maven.csse.rose-hulman.edu/artifactory/student-release-local"
        }
    }
}
// Code coverage analyzer
jacoco {
    toolVersion = "0.7.+"
}
jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}
test {
    jacoco {
        append = false
    }
}
test.finalizedBy(jacocoTestReport)
task codeCoverageInfo (dependsOn: jacocoTestReport) {
    ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
    doLast {
        println "Transforming source file."

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false);
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://xml.org/sax/features/namespaces", false)

        def reportNode = parser.parse(srcFile)
        reportNode.children().each {
            if(it.name() == 'counter') {
                String type = it.@type
                float missed = it.@missed as float
                float covered = it.@covered as float
                float percentage = covered / (missed + covered) * 100
                println "Code Coverage[$type]: $percentage%"
            }
        }
    }
}
jacocoTestReport.finalizedBy(codeCoverageInfo)


// SSH Publishing
ssh.settings {
    knownHosts = allowAnyHosts
}

remotes {
    stagingServer {
        host = '477-21.csse.rose-hulman.edu'
        if(file("gradle.properties").exists()){
            user = System.properties['username']
            password = System.properties['password']
        } else {
            user = System.getenv('SSH_USER')
            password = System.getenv('SSH_PASSWORD')
        }
    }
    prodServer {
        host = '477-43.csse.rose-hulman.edu'
        if(file("gradle.properties").exists()){
            user = System.properties['username']
            password = System.properties['password']
        } else {
            user = System.getenv('SSH_USER')
            password = System.getenv('SSH_PASSWORD')
        }
    }
}

task publishToStagingWebServer(dependsOn: "packageSource") {
    ssh.run {
        session(remotes.stagingServer) {
            println "Checking if remote /tmp/webserver exists ..."
            def result = execute('if test -d /tmp/webserver; then echo "exists"; fi')
            if (result != "exists") {
                println("Remote /tmp/webserver does not exist, creating a new one...")
                execute('mkdir -p /tmp/webserver')
                println("Remote /tmp/webserver created!")
            }
            println "Transfering file from local build/libs to remote /tmp/webserver ..."
            put from: "${buildDir}/libs/*", into: '/tmp/webserver'

            println "Checking if remote /var/www/html/plugins exists ..."
            result = execute('if test -d /var/www/html/plugins; then echo "exists"; fi')
            if (result != "exists") {
                println("Remote /var/www/html/plugins does not exist, creating a new one...")
                executeSudo('mkdir -p /var/www/html/plugins', pty: true)
                println("Remote /var/www/html/plugins created!")
            }
            println "Copying data from the temp folder to the plugin folder ..."
            executeSudo('cp -a /tmp/webserver/. /var/www/html/plugins/', pty: true)

            println "Done! Clearing the tmp folder ..."
            executeSudo('rm -rf /tmp/webserver', pty: true)
            println "All done!"
            println "Plugin has been deployed to http://477-21.csse.rose-hulman.edu/webserver/"
        }
    }
}

task publishToProdWebServer(dependsOn: ["packageSources", "publishToStagingWebServer"]) {
    ssh.run {
        session(remotes.prodServer) {
            println "Checking if remote /tmp/webserver exists ..."
            def result = execute('if test -d /tmp/webserver; then echo "exists"; fi')
            if (result != "exists") {
                println("Remote /tmp/webserver does not exist, creating a new one...")
                execute('mkdir -p /tmp/webserver')
                println("Remote /tmp/webserver created!")
            }
            println "Transfering file from local build/libs to remote /tmp/webserver ..."
            put from: "${buildDir}/libs/*", into: '/tmp/webserver'

            println "Checking if remote /var/www/html/plugins exists ..."
            result = execute('if test -d /var/www/html/plugins; then echo "exists"; fi')
            if (result != "exists") {
                println("Remote /var/www/html/plugins does not exist, creating a new one...")
                executeSudo('mkdir -p /var/www/html/plugins', pty: true)
                println("Remote /var/www/html/plugins created!")
            }
            println "Copying data from the temp folder to the plugin folder ..."
            executeSudo('cp -a /tmp/webserver/. /var/www/html/plugins/', pty: true)

            println "Done! Clearing the tmp folder ..."
            executeSudo('rm -rf /tmp/webserver', pty: true)
            println "All done!"
            println "Plugin has been deployed to http://477-43.csse.rose-hulman.edu/webserver/"
        }
    }
}